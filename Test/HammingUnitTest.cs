using CodeWars;
using NUnit.Framework;

namespace Test
{
    public class HammingUnitTest
    {

        [Test]
        public void T0_Should_Encode_String_With_Hamming_Algorithm()
        {
            var h = new Hamming();
            Assert.AreEqual("000111111000111000000000000111111000000111000111000111111111111000000111", h.Encode("hey"));
            Assert.AreEqual("0001110001110001110000000001111110001110000000000001111110000001110001110" +
                "0000011100000000000000000011100011100000011111100011111100000011100011100011111100011" +
                "11111110000001111111110000001111110001111110000001110001110001111110001110000001110000" +
                "00111000000000000000000111111111000111000000000111111000111111111111000111111000111111" +
                "00000000011111100000011100000000000011100000000000000000011111100011111100011100011111" +
                "10000001110001110000001110000000000000000001111111110001110000000001111110001110000000" +
                "000001111110000000000001110001111111110001110000000000001110000000000000000001111110001" +
                "1100000011100000011100000000000000000011111100000000011111100011111100000000000011100011" +
                "1111000111111111000000000111000000000000000000111111000000111000000000111111000111111111" +
                "11100000011100000000000000000011111111100011100000000011111100011100000000000011111100011" +
                "1000000111000111111111000000111111000000111000000000000000000111111000111000111111000111" +
                "111000000000000111000111111111000111000000000111111000000000000111",
                h.Encode("The Sensei told me that i can do this kata"));
            Assert.AreEqual("000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000", h.Encode("T3st"));
            Assert.AreEqual("000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111", h.Encode("T?st!%"));
        }


        [Test]
        public void T1_Should_Decode_Binary_Sequence_To_String()
        {
            var h = new Hamming();
            Assert.AreEqual("h", h.Decode("10011111" +
                                          "10001110" +
                                          "01000010"));

            Assert.AreEqual("e", h.Decode("00011111" +
                                          "10000001" +
                                          "11001111"));

            Assert.AreEqual("y", h.Decode("00011111" +
                                          "01101110" +
                                          "00010111"));

            Assert.AreEqual("hey", h.Decode("100111111000111001000010000111111000000111001111000111110110111000010111"));
            Assert.AreEqual("The Sensei told me that i can do this kata",
                h.Decode("000111000111000111000100000111111000111000" +
                "0010000001111110000001110001110001001110000000000000" +
                "0000011100011100000011111100011111100000011100011100" +
                "0111111000111111111000000111111111000000111111000110" +
                "11100001011100011100011111100011100100011100000011100" +
                "0000000000000000111111111000111000000000111111000111111" +
                "11111100011111100011111100000000011111100000011100000100" +
                "00001110000000000010000001111110001111110001110001111110000" +
                "0011100011100000011100000000000000000011111111100011100000000" +
                "01111110001110000000000001111110000000100001110001111111110001" +
                "11000000000100111000000000000000000111111000111000000111000000111" +
                "000000000000000000111111000000000111111000111111000000000000111000111" +
                "11100011111111100000000011100000000000001000011111100000011100000000011111" +
                "10001111111101110000001110000000000000000001111111110001110000000001111110" +
                "001110000000000001111110001110000001110001111111110000001111110000001110000" +
                "00000000000000111111000111000111111000111111000000000000111000111111111000111000000000111111000000000000111"));
            Assert.AreEqual("T3st", h.Decode("000111000111000111000001000000111111000000111111000111111111000000111011000111111111000111000000"));
            Assert.AreEqual("T?st!%", h.Decode("000111000111000111000010000000111111111111011111000111111111000000111111000111101111000111000000000000111000000000000111000000111000000111000111"));
        }


    }
}